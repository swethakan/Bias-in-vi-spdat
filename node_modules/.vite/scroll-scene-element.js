// node_modules/scroll-scene-element/dist/scroll-scene-element.js
var e = new Map();
var t = new WeakMap();
var s = 0;
var n = false;
function o(o2, r2) {
  let f2 = e.get(r2);
  f2 || (f2 = function(e2) {
    return new IntersectionObserver((e3) => {
      const o3 = window.pageYOffset;
      n = o3 > s, s = o3;
      for (const s2 of e3) {
        const e4 = s2.target, o4 = s2.boundingClientRect, r3 = e4.offset, f3 = s2.isIntersecting;
        if (e4.progress) {
          let s3 = t.get(e4);
          s3 || (s3 = i(e4), t.set(e4, s3)), f3 ? s3.on() : s3.off();
        }
        e4.dispatchEvent(new CustomEvent("scroll-scene-" + (f3 ? "enter" : "exit"), { bubbles: true, detail: { bounds: o4, isScrollingDown: n, element: e4, offset: r3 } }));
      }
    }, { rootMargin: `${-100 * (1 - e2)}% 0px ${-100 * e2}%` });
  }(r2), e.set(r2, f2)), f2.observe(o2);
}
function r(t2, s2) {
  const n2 = e.get(s2);
  n2 && n2.unobserve(t2);
}
function i(e2) {
  function t2() {
    const t3 = e2.getBoundingClientRect(), s2 = e2.offset, n2 = t3.top, o2 = Math.max(0, Math.min((window.innerHeight * s2 - n2) / (t3.bottom - n2), 1));
    e2.dispatchEvent(new CustomEvent("scroll-scene-progress", { bubbles: true, detail: { bounds: t3, element: e2, progress: o2, offset: s2 } }));
  }
  return { on() {
    t2(), window.addEventListener("scroll", t2, false);
  }, off() {
    window.removeEventListener("scroll", t2, false);
  } };
}
var f = class extends HTMLElement {
  connectedCallback() {
    o(this, this.offset);
  }
  disconnectedCallback() {
    r(this, this.offset);
  }
  attributeChangedCallback(e2, t2) {
    if (e2 === "offset") {
      const e3 = Number.parseFloat(t2);
      e3 !== this.offset && (r(this, e3), o(this, this.offset));
    }
  }
  static get observedAttributes() {
    return ["offset", "progress"];
  }
  get offset() {
    return Number.parseFloat(this.getAttribute("offset")) || 0.5;
  }
  set offset(e2) {
    this.setAttribute("offset", e2.toString());
  }
  get progress() {
    return this.hasAttribute("progress");
  }
  set progress(e2) {
    e2 ? this.setAttribute("progress", "") : this.removeAttribute("progress");
  }
};
window.customElements.get("scroll-scene") || (window.ScrollSceneElement = f, window.customElements.define("scroll-scene", f));

// dep:scroll-scene-element
var scroll_scene_element_default = f;
export {
  scroll_scene_element_default as default
};
//# sourceMappingURL=scroll-scene-element.js.map
